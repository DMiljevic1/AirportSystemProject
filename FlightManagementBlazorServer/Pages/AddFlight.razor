@page "/AddFlight"
@using System.Text;
@inject FlightService _flightService;
@inject UserService _userService;
@inject NavigationManager _navigationManager;

@if(Users == null)
{
       <p>Loading...</p>
}
else
{
    @if(Users.FirstOrDefault(user => user.IsLogged == true) == null || Users.FirstOrDefault(user => user.IsLogged == true).Role == "CheckIn")
     {
         <h3>You don't have permission to view this page</h3>
     }
     else   //Else User is admin
     {
         <h3>Add Flight</h3>
         @if (Flight == null)
          {
            <p>Loading...</p> 
          }
          else
          {
          <EditForm Model="@Flight" OnValidSubmit="@AddFlightAsync">
              <FlightFields Flight="@Flight"></FlightFields>
              <button type="submit" class="btn btn-success">
                  <span class="oi oi-pencil"></span>
                  Add Flight
              </button>
              <button type="button" class="btn btn-secondary" @onclick="Close">
                  <span class="oi oi-media-skip-backward"></span>
                  Close
              </button>
          </EditForm>
          }
     }
}


<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors"></NotificationDialog>

@code { 
    public List<User> Users { get; set; }
    public Flight Flight { get; set; }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Flight = new Flight();
        Flight.FlightDate = DateTime.Now;
        Users = await _userService.GetUsersAsync();
    }

    private async Task AddFlightAsync()
    {
        ValidationErrors = ValidateFlight();
        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _flightService.AddFlightAsync(Flight);
            Close();
        }
    }

    private void Close()
    {
        _navigationManager.NavigateTo("/");
    }

    private List<ValidationError> ValidateFlight()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(Flight.Number))
            validationErrors.Add(new ValidationError { Description = "Please insert flight number!" });

        if (String.IsNullOrWhiteSpace(Flight.AirportTo))
            validationErrors.Add(new ValidationError { Description = "Please insert Airport To!" });

        if (Flight.CarrierId == null)
            validationErrors.Add(new ValidationError { Description = "Please select Carrier!" });

        if (String.IsNullOrWhiteSpace(Flight.FlightTime))
            validationErrors.Add(new ValidationError { Description = "Please insert Flight Time!" });

        return validationErrors;

    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }
    }
