@page "/"
@using FlightManagementBlazorServer.Services
@inject FlightService _flightService;
@inject UserService _userService;
@inject NavigationManager _navigationManager;

@if (Users == null)
{
    <p>Loading...</p>
}
else
{
    @if(Users.FirstOrDefault(user => user.IsLogged == true) == null)
    {
        <h3 style="justify-content:center">You don't have permission to view this page</h3>
        <button type="button" class="btn btn-success"  @onclick="LogIn">
            <span class="oi oi-account-login"></span>
            Log In
        </button>
    }
    else if (Users.FirstOrDefault(user => user.IsLogged == true).Role == "Admin")
    {
        <h3>Flights</h3>
        <button type="button" class="btn btn-success" @onclick="OpenAddFlightPage">
            <span class="oi oi-plus"></span>
            Add Flight
        </button>
        @if (Flights == null)
        {
            <div>Loading...</div>
        }
        else
        {
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Carrier</th>
                        <th>Airport to</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in Flights)
                    {
                        <tr>
                            <td>@flight.Number</td>
                            <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
                            <td>@flight.FlightTime</td>
                            <td>@flight.Carrier?.Name</td>
                            <td>@flight.AirportTo</td>
                            <td>
                                <a href="/EditFlight/@flight.Id" class="btn btn-primary">
                                    <span class="oi oi-pencil"></span>
                                </a>
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteFlight(flight.Id)">
                                    <span class="oi oi-delete"></span>
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="() => ArchiveFlight(flight.Id)">
                                    <span class="oi oi-transfer"></span>
                                </button>
                                <a href="/PassengerList/@flight.Id" class="btn btn-dark">
                                    <span class="oi oi-person"></span>
                                </a>
                                <a href="/CheckinPassengerList/@flight.Id" class="btn btn-warning">
                                    <span class="oi oi-flag"></span>
                                </a>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        }
    }
    else  //Else User == "CheckIn"
    {
        <h3>Flights</h3>
        @if (Flights == null)
        {
            <div>Loading...</div>
        }
        else
        {
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>Number</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Carrier</th>
                        <th>Airport to</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var flight in Flights)
                    {
                        <tr>
                            <td>@flight.Number</td>
                            <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
                            <td>@flight.FlightTime</td>
                            <td>@flight.Carrier?.Name</td>
                            <td>@flight.AirportTo</td>
                            <td>
                                <a href="/PassengerList/@flight.Id" class="btn btn-dark">
                                    <span class="oi oi-person"></span>
                                </a>
                                <a href="/CheckinPassengerList/@flight.Id" class="btn btn-warning">
                                    <span class="oi oi-flag"></span>
                                </a>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        }
    }
}


<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete flight?"></ConfirmationDialog>
<ConfirmationDialog @ref="ArchiveConfirmationDialog" ConfirmationChanged="@OnArchiveConfirmationSelected" Question="Archive flight?"></ConfirmationDialog>

@code {
    public List<User> Users { get; set; }
    public User LoggedUser { get; set; }
    private List<Flight> Flights;
    public ConfirmationDialog DeleteConfirmationDialog { get; set; }
    public ConfirmationDialog ArchiveConfirmationDialog { get; set; }
    public int SelectedFlightId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Flights = await _flightService.GetFlights();
        Users = await _userService.GetUsersAsync();
    }

    private void OpenAddFlightPage()
    {
        _navigationManager.NavigateTo("/AddFlight");
    }

    private async Task DeleteFlight(int flightId)
    {
        SelectedFlightId = flightId;
        DeleteConfirmationDialog.Show();
    }

    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _flightService.DeleteFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task OnArchiveConfirmationSelected(bool isArchiveConfirmed)
    {
        if (isArchiveConfirmed)
        {
            await _flightService.ArchiveFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task ArchiveFlight(int flightId)
    {
        SelectedFlightId = flightId;
        ArchiveConfirmationDialog.Show();
    }
    private async Task LogOutUser()
    {
        await _userService.LogOutUserAsync(Users.FirstOrDefault(user => user.IsLogged == true).Id);
        _navigationManager.NavigateTo("/LogIn");
    }
    private void LogIn()
    {
        _navigationManager.NavigateTo("/LogIn");
    }

}
