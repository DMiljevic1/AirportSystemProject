@page "/LogIn"
@inject NavigationManager _navigationManager;
@inject UserService _userService;

@if (Users == null)
{
    <p>Loading...</p>
}
else
{
    @if (Users.FirstOrDefault(user => user.IsLogged == true) == null)
    {
        <h3>Log In</h3>
        <EditForm Model="@User" OnValidSubmit="@CheckUser">
            <LogInFields user="@User"></LogInFields>
            <button type="submit" class="btn btn-success">
                <span class="oi oi-account-login"></span>
                Log In
            </button>
        </EditForm>
        <h3>@Message</h3>
     }
     else
     {
        <p>You need to log out first</p>
        <button type="button" class="btn btn-info" @onclick="LogOut">
            <span class="oi oi-account-logout"></span>
            Log Out
        </button>
     }
}



@code {
    public User User { get; set; }
    protected User LogInUser { get; set; }
    public List<User> Users { get; set; }
    public string Message { get; set; }
    protected override async Task OnInitializedAsync()
    {
        User = new User();
        Users = await _userService.GetUsersAsync();
    }
    private async Task CheckUser()
    {
        LogInUser = Users.FirstOrDefault(u => u.UserName.Equals(User.UserName));
        if (LogInUser.Password == User.Password)
        {
            await _userService.LogInUserAsync(LogInUser.Id);
            _navigationManager.NavigateTo("/");
        }
        else
            Message = "Invalid username or password";
    }
    private async Task LogOut()
    {
        await _userService.LogOutUserAsync(Users.FirstOrDefault(user => user.IsLogged == true).Id);
        _navigationManager.NavigateTo("/LogIn");
    }
}
